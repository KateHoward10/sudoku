{"version":3,"sources":["helpers.js","components/Controls/styles.js","components/Controls/index.js","components/Cell/styles.js","components/Cell/index.js","components/Grid/index.js","components/Footer/styles.js","components/Footer/index.js","components/TopGames/styles.js","components/TopGames/index.js","App.js","hooks/useInterval.js","serviceWorker.js","index.js"],"names":["getRating","number","Math","round","formatTime","time","floor","Container","styled","div","Button","button","StarContainer","span","rating","Controls","start","giveUp","playing","onClick","StyledCell","props","index","wrong","Input","input","Cell","onEnter","value","onChange","Grid","OpenButton","TopGames","openModal","Background","CloseButton","topGames","closeModal","thisTime","map","game","key","date","App","useState","togglePlaying","setTime","Array","from","puzzle","setPuzzle","setRating","guesses","setGuesses","status","setStatus","modalOpen","toggleModalOpen","JSON","parse","localStorage","getItem","setTopGames","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","solvepuzzle","join","every","guess","length","today","Date","updatedGames","toLocaleDateString","sort","a","b","slice","setItem","stringify","fill","newPuzzle","makepuzzle","newRating","ratepuzzle","console","log","e","preventDefault","newGuesses","i","parseInt","target","undefined","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c48433d.chunk.js","sourcesContent":["export function getRating(number) {\n  switch (Math.round(number)) {\n    case 0:\n      return 'Very Easy';\n    case 1:\n      return 'Easy';\n    case 2:\n      return 'Medium';\n    case 3:\n      return 'Hard';\n    case 4:\n      return 'Very Hard';\n    case 5:\n      return 'Deadly';\n    default:\n      return null;\n  }\n}\n\nexport function formatTime(time) {\n  return `${Math.floor(time / 60) < 10 ? `0${Math.floor(time / 60)}` : Math.floor(time / 60)}:${\n    time % 60 < 10 ? `0${time % 60}` : time % 60\n  }`;\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  min-height: 50px;\n`;\n\nexport const Button = styled.button`\n  font-size: 1rem;\n  background: transparent;\n`;\n\nexport const StarContainer = styled.span(\n  ({ rating }) => `\n  background: linear-gradient(to right, #000 ${(rating / 5) * 100}%, lightgrey ${(rating / 5) * 100}%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n`\n);\n","import React from 'react';\nimport { getRating } from '../../helpers';\nimport { Container, Button, StarContainer } from './styles';\n\nfunction Controls({ start, giveUp, playing, rating }) {\n  return (\n    <Container>\n      <Button onClick={playing ? giveUp : start}>{playing ? 'Give up' : 'Play'}</Button>\n      {playing && (\n        <div>\n          {getRating(rating)} <StarContainer rating={rating}>★★★★★</StarContainer>\n        </div>\n      )}\n    </Container>\n  );\n}\n\nexport default Controls;\n","import styled from 'styled-components';\n\nexport const StyledCell = styled.div(\n  props => `\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-right: ${props.index % 9 === 2 || props.index % 9 === 5 ? 2 : 1}px solid grey;\n  border-bottom: ${(props.index > 17 && props.index < 27) || (props.index > 44 && props.index < 54) ? 2 : 1}px\n    solid grey;\n  font-size: 20px;\n  background: ${props.wrong ? 'rgba(255,0,0,0.6)' : 'transparent'};\n`\n);\n\nexport const Input = styled.input`\n  width: 90%;\n  height: 90%;\n  border: none;\n  text-align: center;\n  font-size: 20px;\n  font-family: cursive;\n  background: transparent;\n`;\n","import React from 'react';\nimport { StyledCell, Input } from './styles';\n\nfunction Cell({ index, number, onEnter, value, wrong }) {\n  return (\n    <StyledCell index={index} wrong={wrong}>\n      {number ? number : <Input value={value} onChange={onEnter} />}\n    </StyledCell>\n  );\n}\n\nexport default Cell;\n","import styled from 'styled-components';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-rows: repeat(9, 10vw);\n  grid-template-columns: repeat(9, 10vw);\n  border: 1px solid grey;\n  border-top: 2px solid grey;\n  border-left: 2px solid grey;\n  background: transparent;\n  @media screen and (min-width: 600px) {\n    grid-template-rows: repeat(9, 50px);\n    grid-template-columns: repeat(9, 50px);\n  }\n`;\n\nexport default Grid;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const OpenButton = styled.button`\n  background: transparent;\n`;\n","import React from 'react';\nimport { formatTime } from '../../helpers.js';\nimport { Container, OpenButton } from './styles';\n\nfunction TopGames({ time, openModal }) {\n  return (\n    <Container>\n      <p>{formatTime(time)}</p>\n      <OpenButton onClick={openModal}>Top Games</OpenButton>\n    </Container>\n  );\n}\n\nexport default TopGames;\n","import styled from 'styled-components';\n\nexport const Background = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background: #fff;\n  padding: 20px;\n`;\n\nexport const CloseButton = styled.button`\n  border: none;\n  outline: none\n  background: transparent;\n  align-self: flex-end;\n  font-size: 18px;\n`;\n","import React from 'react';\nimport { formatTime, getRating } from '../../helpers.js';\nimport { Background, Container, CloseButton } from './styles';\n\nfunction TopGames({ topGames, closeModal, thisTime }) {\n  return (\n    <Background>\n      <Container>\n        <CloseButton onClick={closeModal}>✖</CloseButton>\n        {thisTime && <h2>Solved in {formatTime(thisTime)}!</h2>}\n        <span>Your top games:</span>\n        <ol>\n          {topGames &&\n            topGames.map((game, index) => (\n              <li key={index}>\n                <strong>{game.date}</strong> {formatTime(game.time)} ({getRating(game.rating)})\n              </li>\n            ))}\n        </ol>\n      </Container>\n    </Background>\n  );\n}\n\nexport default TopGames;\n","import React, { useState, useEffect } from 'react';\nimport useInterval from './hooks/useInterval';\nimport { makepuzzle, solvepuzzle, ratepuzzle } from 'sudoku';\nimport Controls from './components/Controls';\nimport Cell from './components/Cell';\nimport Grid from './components/Grid';\nimport Footer from './components/Footer';\nimport TopGames from './components/TopGames';\n\nfunction App() {\n  const [playing, togglePlaying] = useState(false);\n  const [time, setTime] = useState(0);\n  const [puzzle, setPuzzle] = useState(Array.from(Array(81)));\n  const [rating, setRating] = useState(null);\n  const [guesses, setGuesses] = useState(null);\n  const [status, setStatus] = useState(null);\n  const [modalOpen, toggleModalOpen] = useState(false);\n  const [topGames, setTopGames] = useState(JSON.parse(localStorage.getItem('topGames')) || []);\n\n  function start() {\n    setPuzzle(Array.from(Array(81)).fill(9));\n    setStatus(null);\n    togglePlaying(true);\n    setTime(0);\n    const newPuzzle = makepuzzle();\n    setPuzzle(newPuzzle);\n    const newRating = ratepuzzle(newPuzzle, 5);\n    setRating(newRating);\n    console.log(solvepuzzle(newPuzzle).map(number => number + 1));\n    setGuesses(newPuzzle.map(number => (number !== null ? number + 1 : null)));\n  }\n\n  function giveUp() {\n    setStatus(null);\n    togglePlaying(false);\n    setPuzzle(solvepuzzle(puzzle));\n  }\n\n  useInterval(\n    () => {\n      setTime(time + 1);\n    },\n    playing ? 1000 : null\n  );\n\n  useEffect(() => {\n    if (\n      guesses &&\n      solvepuzzle(puzzle) &&\n      guesses.join('') ===\n        solvepuzzle(puzzle)\n          .map(number => number + 1)\n          .join('')\n    ) {\n      setStatus('solved');\n      togglePlaying(false);\n      toggleModalOpen(true);\n    } else if (guesses && guesses.every(guess => typeof guess === 'number')) {\n      setStatus('filled');\n    }\n  }, [guesses, puzzle, topGames, time, rating]);\n\n  useEffect(() => {\n    if (status === 'solved' && (topGames.length < 5 || time < topGames[topGames.length - 1].time)) {\n      const today = new Date();\n      let updatedGames = [{ time, rating, date: today.toLocaleDateString('en-GB') }, ...topGames].sort(\n        (a, b) => a.time - b.time\n      );\n      if (updatedGames.length > 5) updatedGames = updatedGames.slice(0, 5);\n      localStorage.setItem('topGames', JSON.stringify(updatedGames));\n      setTopGames(updatedGames);\n    }\n  }, [status]);\n\n  return (\n    <div>\n      <Controls\n        start={start}\n        giveUp={giveUp}\n        playing={playing}\n        rating={rating}\n        openModal={() => toggleModalOpen(true)}\n      />\n      <Grid>\n        {puzzle.map((number, index) => (\n          <Cell\n            key={index}\n            index={index}\n            number={number !== null ? number + 1 : null}\n            onEnter={e => {\n              e.preventDefault();\n              const newGuesses = guesses.map((guess, i) => {\n                if (i === index) {\n                  return parseInt(e.target.value);\n                } else return guess;\n              });\n              setGuesses(newGuesses);\n            }}\n            value={guesses && guesses[index] ? guesses[index] : undefined}\n            wrong={status === 'filled' && solvepuzzle(puzzle)[index] + 1 !== guesses[index]}\n          />\n        ))}\n      </Grid>\n      <Footer time={time} openModal={() => toggleModalOpen(true)} />\n      {modalOpen && (\n        <TopGames\n          topGames={topGames}\n          closeModal={() => toggleModalOpen(false)}\n          thisTime={status === 'solved' ? time : null}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}